##HEAPSORT##
-Ordenação Instável. É possível adaptar a estrutura a ser ordenada de forma a tornar a ordenação estável.
-Complexidade de tempo-->O(n log n)

--Funcionamento do HeapSort -->  O algoritmo primeiro constrói um max-heap,  organizando os elementos de forma que cada nó pai seja maior ou igual aos seus filhos. A navegação pelos nós e seus filhos seja feita por meio de índices:

A heap pode ser representada como uma arvore (uma árvore binária com propriedades especiais[1]) ou como um vetor. Para uma ordenação decrescente, deve ser construída uma heap mínima (o menor elemento fica na raiz). Para uma ordenação crescente, deve ser construído uma heap máxima (o maior elemento fica na raiz).
 
O filho esquerdo de um nó no índice i está em 2*i.
O filho direito está em 2*i + 1
O pai de um nó em i está em (i-1)/2. 

Processos: 
1-Heap máximo
2-Troca
Exemplo:

1  2 3 4 5  6 7 (Posições):
15 7 4 8 12 1 3

4  8 1 15 12 7 3

1 8  3 15 12 7 4


Código Heapsort (JAVA):##

public static void heapSort(int[] vetor){
        int tamanho = vetor.length;
        int i = tamanho / 2, pai, filho, t;
        while (true){
            if (i > 0){
                i--; t = vetor[i];
            }else{
                tamanho--;
                if (tamanho <= 0) {return;}
                t = vetor[tamanho];
                vetor[tamanho] = vetor[0];
            }
            pai = i;
            filho = ((i * 2) + 1);
            while (filho < tamanho){
                if ((filho + 1 < tamanho) && (vetor[filho + 1] > vetor[filho])) {filho++;}
                if (vetor[filho] > t){
                    vetor[pai] = vetor[filho];
                    pai = filho;
                    filho = pai * 2 + 1;
                }else {break;}
            }
            vetor[pai] = t;
        }
    }



